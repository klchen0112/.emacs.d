

* Emacs
** File Layout
*** Features
You'll notice several headings tagged with =@{feature}= like in =@mail=, these
subtrees will only be tangled if *at least one* of those features are enabled when
the config is built.

*** init.el
Everything is tangled into =init.el= by default and I don't really make any
attempt to keep this file organized since it's not really intended to be
interacted with.

#+begin_src emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-
#+end_src

*** early-init.el :early:
=early-init.el= is tangled from the subtrees that are tagged with =early= and it
should only be used to do minimal configuration that needs to occur early in the
load sequence.

#+begin_src emacs-lisp :tangle early-init.el
;;; early-init.el -*- lexical-binding: t; -*-
#+end_src


* Early :early:
:PROPERTIES:
:header-args:emacs-lisp: :tangle early-init.el
:END:

** disable package
#+begin_src emacs-lisp
  ;; Disable package.el in favor of straight.el
  (setq package-enable-at-startup nil
        package-quickstart nil)
#+end_src
** Setup.el :early:



#+begin_src emacs-lisp
  (eval-when-compile
    (require 'setup)
    (require 'cl-lib)
  )
#+end_src
*** package :early:

#+begin_src emacs-lisp
  (eval-when-compile
      (setup-define :package
    		  (lambda (package)
  		    ()
  		      )
    	    :documentation "Fake installation of PACKAGE for twist-nix."
    	    :repeatable 
    	    ))
     
#+end_src

*** :defer

#+begin_src emacs-lisp
  (eval-when-compile
    (setup-define :defer
      		(lambda (seconds &optional func)
  		  `(add-hook 'after-init-hook
  			     (lambda ()
  			       (run-with-timer ,seconds nil
  					       ,(or func (setup-get 'hook))))))
    		:documentation         "Call a function at N seconds after init."
  		))
#+end_src
*** :reformatters
#+begin_src emacs-lisp
  (eval-when-compile
    (setup-define
     :reformatters (lambda  (&rest entries)
  		   (let ((feature (setup-get 'feature)))
  		     (macroexp-progn
  		      (mapcar (pcase-lambda (`(,name . ,args))
  				`(reformatter-define ,name ,@args))
  			      entries)))))
    :documentation "Define reformatters."
    )
#+end_src
*** :load-after
#+begin_src emacs-lisp
  (eval-when-compile
    (setup-define :load-after
  		(lambda (&rest features)
  		  (let ((body `(require ',(setup-get 'feature))))
  		    (dolist (feature (nreverse features))
  		      (setq body `(with-eval-after-load ',feature ,body)))
  		    body))
  		:documentation "Load the current feature after FEATURES.")
    )
#+end_src

*** :nixpkgs
#+begin_src emacs-lisp :yes
  (eval-when-compile
    (setup-define :nixpkgs (lambda (&rest nixpkgs) ())
     :documentation "Fake installation of packages from NIXPKGS for executables."))
#+end_src
* Basic setting
** benchmark-init
#+begin_src emacs-lisp
  (setup benchmark-init
         (:package benchmark-init)
         (:require benchmark-init)
         (:only-if init-file-debug
  		 (add-hook 'after-init-hook 'benchmark-init/deactivate))
         )
#+end_src
** treesit
#+begin_src emacs-lisp
  (setup treesit
         (:only-if (fboundp 'treesit-available-p))
         )
#+end_src
** localization
#+begin_src emacs-lisp
  (setup localization
       (:option calendar-week-start-day 1)
       )

#+end_src
* UI
** theme
#+begin_src emacs-lisp
  (setup modus-themes
         (:package modus-themes)
         (:require modus-themes)
         )
  (setup ef-themes
         (:package ef-themes)
         (:require ef-themes)
         (:option
    	ef-themes-take-over-modus-themes-mode 1)
         (:when-loaded
    	(setq modus-themes-mixed-fonts t
    	      modus-themes-italic-constructs t
    	      modus-themes-disable-other-themes t)

  	(modus-themes-load-theme 'ef-summer))
         )
#+end_src
** font
** nerd-icons
#+begin_src emacs-lisp
  (setup nerd-icons
         (:package nerd-icons))
#+end_src
** Modeline
#+begin_src emacs-lisp
  (setup dashboard
         (:package dashboard)
         (:option  dashboard-icon-type 'nerd-icons)
         (dashboard-setup-startup-hook)
         )

#+end_src

** Dashboard
#+begin_src emacs-lisp
  (setup doom-modeline
         (:package doom-modeline)
         (:hook-into after-init-hook)
         (:hook size-indication-mode)
         (:hook column-number-mode)
         )

#+end_src
** display-line-number
#+begin_src emacs-lisp
  (setup display-fill-column-indicator (:hook-into prog-mode))
  (setup display-line-numbers (:hook-into prog-mode)
         (:option display-line-numbers-width 2
  	     display-line-numbers-type 'relative))
#+end_src

** Scroll
#+begin_src emacs-lisp

  (setup pixel-scroll
         (:only-if  (version<= "29" emacs-version)
  		  (:with-mode pixel-scroll-precision-mode
  			      ;; TODO: Find a better way to hook the minor mode
  			      (:hook-into find-file-hook
  					  help-mode-hook))))
#+end_src

*** Ligatures
#+begin_src emacs-lisp
(setup ligature
       (:package ligature)
       (:hook-into prog-mode-hook)
       (:when-loaded (ligature-set-ligatures
   'prog-mode
   '("-<<" "-<" "-<-" "<--" "<---" "<<-" "<-" "->" "->>" "-->" "--->" "->-" ">-" ">>-" "<->" "<-->" "<--->" "<---->" "<!--"
     "=<<" "=<" "=<=" "<==" "<===" "<<=" "<=" "=>" "=>>" "==>" "===>" "=>=" ">=" ">>=" "<=>" "<==>" "<===>" "<====>" "<!---"
     "<------" "------>" "<=====>" "<~~" "<~" "~>" "~~>" "::" ":::" "\\/" "/\\" "==" "!=" "/=" "~=" "<>" "===" "!==" "=/=" "=!="
     ":=" ":-" ":+" "<*" "<*>" "*>" "<|" "<|>" "|>" "<." "<.>" ".>" "+:" "-:" "=:" "<******>" "(*" "*)" "++" "+++" "|-" "-|"
     "&&" "||"))
     ))

(setup prog-mode
  (:option prettify-symbols-unprettify-at-point t))
#+end_src


* Editor & Keybindings
** Copy&Paste
*** wsl copy
#+begin_src emacs-lisp
(setq select-active-regions nil)
#+end_src
** Editor Config
#+begin_src emacs-lisp
(setup editorconfig)
#+end_src
** Meow with treesitter

#+begin_src emacs-lisp
  (setup meow
   (:package meow)
   (:require meow)
   (:when-loaded
    ;;        (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
    (meow-motion-define-key
     '("j" . meow-next)
     '("k" . meow-prev)
     '("<escape>" . ignore))
    (meow-leader-define-key
     ;; Use SPC (0-9) for digit arguments.
     '("1" . meow-digit-argument)
     '("2" . meow-digit-argument)
     '("3" . meow-digit-argument)
     '("4" . meow-digit-argument)
     '("5" . meow-digit-argument)
     '("6" . meow-digit-argument)
     '("7" . meow-digit-argument)
     '("8" . meow-digit-argument)
     '("9" . meow-digit-argument)
     '("0" . meow-digit-argument)
     '("/" . meow-keypad-describe-key)
     '("?" . meow-cheatsheet))
    (meow-normal-define-key
     '("0" . meow-expand-0)
     '("9" . meow-expand-9)
     '("8" . meow-expand-8)
     '("7" . meow-expand-7)
     '("6" . meow-expand-6)
     '("5" . meow-expand-5)
     '("4" . meow-expand-4)
     '("3" . meow-expand-3)
     '("2" . meow-expand-2)
     '("1" . meow-expand-1)
     '("-" . negative-argument)
     '(";" . meow-reverse)
     '("," . meow-inner-of-thing)
     '("." . meow-bounds-of-thing)
     '("[" . meow-beginning-of-thing)
     '("]" . meow-end-of-thing)
     '("a" . meow-append)
     '("A" . meow-open-below)
     '("b" . meow-back-word)
     '("B" . meow-back-symbol)
     '("c" . meow-change)
     '("d" . meow-delete)
     '("D" . meow-backward-delete)
     '("e" . meow-next-word)
     '("E" . meow-next-symbol)
     '("f" . meow-find)
     '("g" . meow-cancel-selection)
     '("G" . meow-grab)
     '("h" . meow-left)
     '("H" . meow-left-expand)
     '("i" . meow-insert)
     '("I" . meow-open-above)
     '("j" . meow-next)
     '("J" . meow-next-expand)
     '("k" . meow-prev)
     '("K" . meow-prev-expand)
     '("l" . meow-right)
     '("L" . meow-right-expand)
     '("m" . meow-join)
     '("n" . meow-search)
     '("o" . meow-block)
     '("O" . meow-to-block)
     '("p" . meow-yank)
     '("q" . meow-quit)
     '("Q" . meow-goto-line)
     '("r" . meow-replace)
     '("R" . meow-swap-grab)
     '("s" . meow-kill)
     '("t" . meow-till)
     '("u" . meow-undo)
     '("U" . meow-undo-in-selection)
     '("v" . meow-visit)
     '("w" . meow-mark-word)
     '("W" . meow-mark-symbol)
     '("x" . meow-line)
     '("X" . meow-goto-line)
     '("y" . meow-save)
     '("Y" . meow-sync-grab)
     '("z" . meow-pop-selection)
     '("'" . repeat)
     '("<escape>" . ignore))
    ;;(meow-setup)
    (meow-global-mode 1))
   )
  (setup meow-tree-sitter
         (:package meow-tree-sitter)
         (:load-after meow)
         (:when-loaded (meow-tree-sitter-register-defaults)
  		     )
         )
#+end_src
** Keybiding
*** Which-key
#+begin_src emacs-lisp
(setup which-key
       (:package which-key)
       (:hook-into after-init-hook)
       (:option which-key-idle-delay 0.3)
       )

#+end_src
** Undo
Increase undo limit.
#+begin_src emacs-lisp
(setup undo-fu
       (:package undo-fu)
       (:option undo-limit 1000000
             undo-strong-limit (* 2 undo-limit))
       )
#+end_src

** Synatax & Checker

* Completion
Enable indentation and completion with the =TAB= key.
#+begin_src emacs-lisp
;; (setq tab-always-indent 'complete)
#+end_src

Cycle with the =TAB= key if there are only few candidates.
#+begin_src emacs-lisp
;; (setq completion-cycle-threshold 3)
#+end_src


** Style
*** orderless
Space-separated matching components matching in any order.
#+begin_src emacs-lisp
(setup orderless
       (:package orderless)
       (:option
        completion-styles '(substring orderless)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src

** Buffer
*** corfu
Completion Overlay Region FUnction.
#+begin_src emacs-lisp

(setup corfu
       (:package corfu)
       (:with-mode global-corfu-mode
  		   (:hook-into after-init-hook))
       ;; load features
       (:also-load nerd-icons-corfu)
       (:with-feature corfu-popupinfo
  		      (:option corfu-popupinfo-delay '(0.5 . 1.0))
  		      (:hook-into corfu-mode-hook))
       (:with-feature corfu-history
  		      (:hook-into corfu-mode-hook)
  		      )
       (:option
  	corfu-auto t
  	corfu-atuo-refix 2
  	corfu-cycle t
  	corfu-preselect 'prompt
  	corfu-count 16
  	corfu-max-width 120
  	corfu-on-exact-match nil
  	corfu-quit-at-boundary     'separator
  	tab-always-indent 'complete))

(setup nerd-icons-corfu
       (:package nerd-icons-corfu)
       (:also-load nerd-icons)
       )


#+end_src

** Minibuffer
*** vertico
Vertical interactive completion UI.
#+begin_src emacs-lisp
  (setup vertico
         (:package vertico)
         (:also-load orderless)
         (:also-load marginalia)
         (:hook-into after-init-hook)
         (:option vertico-cycle t)
         )


#+end_src

** snippets
#+begin_src emacs-lisp
(setup tempel
       (:package tempel)
       (:also-load tempel-collection)
       (:option tempel-trigger-prefix "<")
       ;; Setup completion at point
       (defun tempel-setup-capf ()
  	 ;; Add the Tempel Capf to `completion-at-point-functions'.
  	 ;; `tempel-expand' only triggers on exact matches. Alternatively use
  	 ;; `tempel-complete' if you want to see all matches, but then you
  	 ;; should also configure `tempel-trigger-prefix', such that Tempel
  	 ;; does not trigger too often when you don't expect it. NOTE: We add
  	 ;; `tempel-expand' *before* the main programming mode Capf, such
  	 ;; that it will be tried first.
  	 (setq-local completion-at-point-functions
  		     (cons #'tempel-expand
  			   completion-at-point-functions)))
       (add-hook 'conf-mode-hook 'tempel-setup-capf)
       (add-hook 'prog-mode-hook 'tempel-setup-capf)
       (add-hook 'text-mode-hook 'tempel-setup-capf)
       )

(setup tempel-collection
       (:package tempel-collection)
       )

#+end_src
** Extensions

*** nerd-icons-completion
#+begin_src emacs-lisp
(setup nerd-icons-completion
       (:package nerd-icons-completion)
       (:also-load nerd-icons)
       (:when-loaded
  	(add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))
       )

#+end_src

*** cape
Completion At Point Extensions.
#+begin_src emacs-lisp
(setup cape
       (:package cape)
       (:when-loaded
       (add-hook 'completion-at-point-functions #'cape-dabbrev)
       (add-hook 'completion-at-point-functions #'cape-file)
       (add-hook 'completion-at-point-functions #'cape-elisp-block)
       )
       )
#+end_src

*** consult
Commands compatible with ~completing-read~.
#+begin_src emacs-lisp
(setup consult
       (:package consult)
       (:option consult-preview-key "M-RET"))

(setup consult-xref
(:when-loaded
       (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref))
       (:load-after consult xref)
       )
#+end_src
*** embark
#+begin_src emacs-lisp
  (setup embark
         (:package embark))
  (setup embark-consult
         (:package embark-consult)
         (:load-after embark consult)
         (:with-mode embark-collect-mode
  		   (:hook consult-preview-at-point-mode))
         )
#+end_src


*** dabbrev
#+begin_src emacs-lisp
(setup dabbrev
       (:option
        dabbrev-case-replace nil
        dabbrev-ignored-buffer-regexps '("\\.\\(?:pdf\\|jpe?g\\|png\\)\\'")))
#+end_src


*** marginalia
Annotations for completion candidates.
#+begin_src emacs-lisp
  (setup marginalia
         (:package marginalia)
         (:also-load nerd-icons-completion)
         (:hook-into after-init-hook))
#+end_src

* Navigation

** Dired
#+begin_src emacs-lisp


(setup dirvish
  (:load-after dired)
       (:package dirvish)
       )

(setup diredfl
        (:load-after dired)
       (:package diredfl)
       )

#+end_src

*** Icons
#+begin_src emacs-lisp

  (setup nerd-icons-dired
    (:package nerd-icons-dired)
    (:load-after dired)
         (:hook-into dired-mode-hook))

#+end_src

*** Git
#+begin_src emacs-lisp :tangle no
(setup dired-git-info
    (:package dired-git-info)
    )
#+end_src

** Isearch
#+begin_src emacs-lisp
(setup isearch
       (:option isearch-lazy-count t))
#+end_src

** Occur
#+begin_src emacs-lisp
(setup replace)

(setup noccur)
#+end_src



** Project
#+begin_src emacs-lisp
  (setup projectile
         (:package projectile)
         (projectile-mode +1)
         )

#+end_src

* Development
Reduce scroll margin.
#+begin_src emacs-lisp
(defun prog-scroll-margin-setup ()
  "Setup `scroll-margin' for `prog-mode'."
  (setq-local scroll-margin 3))
(add-hook 'prog-mode-hook #'prog-scroll-margin-setup)
#+end_src

** Compilation
#+begin_src emacs-lisp
#+end_src

** Containers
*** Docker
#+begin_src emacs-lisp
(setup docker
       (:package docker))
#+end_src

**** Files
Support for Docker related files.
#+begin_src emacs-lisp
  (setup dockerfile-ts-mode
         (:file-match
  	"Dockerfie"))
#+end_src

*** Kubernetes
#+begin_src emacs-lisp
(setup kubernetes (:package kubernetes))
#+end_src

** Coverage
#+begin_src emacs-lisp

#+end_src

** Docs
*** DevDocs
Lookup documentation via DevDocs.
#+begin_src emacs-lisp
(setup devdocs
       (:package devdocs))
#+end_src

** Folding
Code folding with treesit-fold
#+begin_src emacs-lisp
(setup treesit-fold
       (:only-if (fboundp 'treesit-available-p))
       (:package treesit-fold)
       )

#+end_src

** Formatting


#+begin_src emacs-lisp
(setup reformatter
       (:package reformatter)
    ;;   (:reformatters
  	;; If you use prettier, you need to install its executable separately.
  	;;(prettier
  	;; :program "prettier"
  	;; :args (list (concat "--plugin-search-dir="
    ;;                         (expand-file-name
    ;;                          (locate-dominating-file default-directory "package.json")))
    ;;                 "--stdin-filepath" (buffer-file-name)))
  	;;(treefmt
  	;; :program "treefmt"
  	;; :args (list "--stdin" (buffer-file-name)))

  	;;(yamlfmt
  	;; :program "yamlfmt"
  	;; :args (list "-"))

  	;;(jq-format
  	;; :program "jq"
  	;; :args (list "."))

  	;;(biome-format
  	;; :program
  	;; (cond
  	;;  ((executable-find "bunx")
  	;;   "bunx"))
  	;; :args (append (cond
  	;;		((executable-find "bunx")
  	;;		 nil))
    ;;                   (list "@biomejs/biome" "format" (buffer-file-name)
    ;;                         (concat "--stdin-file-path=" (buffer-file-name))))))
    )

#+end_src

** REPL

*** repl-toggle
#+begin_src emacs-lisp
(setup repl-toggle
       (:package repl-toggle)
  (:option rtog/goto-buffer-fun 'pop-to-buffer)
  (:option rtog/mode-repl-alist
        '((emacs-lisp-mode . ielm)
          (org-mode . ielm))))
#+end_src


** Syntax checker
Silence next/previous error, by default it produces a message every time.
#+begin_src emacs-lisp
(advice-add 'next-error :around #'quiet-function-advice)
(advice-add 'previous-error :around #'quiet-function-advice)
#+end_src

*** flycheck
#+begin_src emacs-lisp
    (setup flymake
           (:package flycheck)
           (:when-loaded
  	  (:with-mode global-flycheck-mode
  		      (:hook-into after-init-hook))

    	)
    )

#+end_src

** Version control
#+begin_src emacs-lisp
(setq vc-follow-symlinks t)
(setq vc-make-backup-files nil)
#+end_src

*** diff
#+begin_src emacs-lisp
(setup diff
  (:option diff-font-lock-prettify t))
#+end_src

*** diff-hl
Diff indicators in fringe
#+begin_src emacs-lisp
(setup diff-hl
       (:package diff-hl))
#+end_src

*** magit
Enhanced git related views and commands.
#+begin_src emacs-lisp
  (setup magit
         (:package magit)     )

  (setup forge
         (:package forge)
         (:load-after magit))
#+end_src

** Env

#+begin_src emacs-lisp
(setup envrc
       (:package envrc)
       (:with-mode envrc-global-mode
                   (:hook-into after-init-hook))
       )
#+end_src
** LSP
*** eglot
Generic Language Server Protocol integration via ~eglot~.
#+begin_src emacs-lisp
;;  (setup eglot
;;         (:package eglot)
;;         (:option
;;          eglot-autoshutdown t
;;          eglot-code-action-indications nil
;;          eglot-confirm-server-edits nil
;;          eglot-sync-connect nil)
;;         )
;;
;;  (setup consult-eglot
;;         (:package consult-eglot)
;;         (:load-after eglot)
;;      (:with-feature consult-eglot-embark
;;      (:when-loaded
;;           (consult-eglot-embark-mode))
;;
;;         ))
;;
;;  (setup eglot-booster
;;
;;         (:package eglot-booster)
;;         (:option eglot-booster-io-only t)
;;         (:load-after eglot)
;;         (:when-loaded (:hook-into eglot-mode-hook))
;;         )
;;
#+end_src
** Debugger
**** Dape
#+begin_src emacs-lisp
  (setup dape
         (:package dape)
         (:option
  	dape-buffer-window-arrangement 'right
  	dape-inlay-hints t)
         (:when-loaded
  	(add-hook after-init-hook 'daep-breakpoint-load)
  	(add-hook kill-emasc-hook 'dape-breakpoint-save)
  	(add-hook dape-compile-hook  'kill-buffer)
  	))
#+end_src

* Writing
** Org
#+begin_src emacs-lisp
  (setup org
         (:package org)
         (:option org-directory "~/org")
         (:with-feature org-agenda
    		      (:option
    		       ;; 时间前导0
    		       org-agenda-time-leading-zero t
    		       ;; 默认显示区间
    		       org-agenda-span 6
    		       ;; agenda view 默认从周一开始显示
    		       org-agenda-start-on-weekday 1)
    		      )
         )

  (setup org-download
         (:package org-download)
         (:load-after org)
         (:option   org-download-method 'directory
    	       org-download-image-dir "~/Library/Mobile Documents/com~apple~CloudDocs/Documents/org-attach"
    	       org-download-heading-lvl 'nil)
         )

  (setup org-modern
         (:package org-modern)
         (:load-after org)
         (:when-loaded (:hook-into org-mode) (add-hook 'org-agenda-finalize-hook #'org-modern-agenda))
         (:option
    	;; Edit settings
    	org-auto-align-tags nil
    	org-tags-column 0
    	org-catch-invisible-edits 'show-and-error
    	org-special-ctrl-a/e t
    	org-insert-heading-respect-content t

    	;; Org styling, hide markup etc.
    	org-hide-emphasis-markers t
    	org-pretty-entities t
    	org-agenda-tags-column 0
    	org-ellipsis "…")
         (:when-loaded
    	(modify-all-frames-parameters
    	 '((right-divider-width . 40)
    	   (internal-border-width . 40)))
    	(dolist (face '(window-divider
    			window-divider-first-pixel
    			window-divider-last-pixel))
    	  (face-spec-reset-face face)
    	  (set-face-foreground face (face-attribute 'default :background)))
    	(set-face-background 'fringe (face-attribute 'default :background))
    	)
        )

  (setup org-modern-indent
    (:package org-modern-indent)
         (:load-after org-modern)
         (:when-loaded (:hook-into org-mode))
         (:load-after org))
  (setup org-appear
         (:load-after org)
         (:package org-appear)
         (:when-loaded (:hook-into org-mode)))

#+end_src
** Org-roam
#+begin_src emacs-lisp :tangle no

  (setup org-roam
         (:package org-roam)
         (:load-after org)
         (:option org-roam-directory (file-truename org-directory))
         (:when-loaded  (org-roam-db-autosync-mode)
  		      (setq org-id-link-to-org-use-id t)
  		      (setq org-roam-completion-everywhere t))
         )

  (setup org-roam-ui
  (:load-after org-roam)
         (:package org-roam-ui)
         (:load-after org-roam)
         (:when-loaded
  	(setq org-roam-ui-sync-theme t
                org-roam-ui-follow t
  	      org-roam-ui-update-on-save t
                org-roam-ui-open-on-start nil
  	      )
  	))

  (setup org-roam-timestamps
         (:package org-roam-timestamps)
         (:load-after org-roam)
         (:hook-into org-roam-mode-hook)
         (:option org-roam-timestamps-parent-file t))



  (setup org-transclusion
    (:load-after org-roam)
         (:package org-transclusion)
         (:hook-into org-roam-mode-hook) )

  (setup consult-org-roam
    (:load-after org-roam consult)
         (:package consult-org-roam)
         (:option
  	;; Use `ripgrep' for searching with `consult-org-roam-search'
  	consult-org-roam-grep-func #'consult-ripgrep
  	;; Configure a custom narrow key for `consult-buffer'
  	consult-org-roam-buffer-narrow-key ?r
  	;; Display org-roam buffers right after non-org-roam buffers
  	;; in consult-buffer (and not down at the bottom)
  	consult-org-roam-buffer-after-buffers t
  	)
)
#+end_src
* Major modes
:PROPERTIES:
:header-args:emacs-lisp: :tangle no
:END:

** emacs-lisp
#+begin_src emacs-lisp
(setup elisp-mode
       (:hook flymake-mode outline-minor-mode))
#+end_src


** outline
Display outlines in text like files or use it in conjunction with other major modes via ~outline-minor-mode~.
** cobol
#+begin_src emacs-lisp :tangle no
(setup cobol-mode
(:package cobol-mode)
  (:file-match "\\.\\(cob\\|cbl\\|cpy\\)\\'"))
#+end_src

** csv
#+begin_src emacs-lisp
(setup csv-mode
       (:package csv-mode)
       (:file-match "\\.[Cc][Ss][Vv]\\'")
       (:with-mode tsv-mode (:file-match "\\.tsv\\'"))
       (:option csv-separators '("," "\t" ";")))
#+end_src

** git
*** Packages
**** git-modes
*** Packages
** java
#+begin_src emacs-lisp
(setup java-ts-mode)

(setup eglot-java
       (:package eglot-java)
       (:load-after eglot)
       (:hook-into java-base-mode-hook)
       )

#+end_src

*** Packages
**** gradle-mode
#+begin_src emacs-lisp
(setup gradle-mode
       (:package gradle-mode)
       (:hook-into java-base-mode-hook kotlin-mode-hook)
       (:option gradle-executable-path "gradle"))
#+end_src

** json
#+begin_src emacs-lisp
  (setup json-ts-mode
  		   
         (:file-match "\\(?:\\(?:\\.json\\|\\.jsonld\\|\\.babelrc\\|\\.bowerrc\\|composer\\.lock\\)\\'\\)")
         )

#+end_src

*** Packages
**** json-navigator
#+begin_src emacs-lisp
(setup json-navigator)
#+end_src

** kotlin
#+begin_src emacs-lisp
(setup kotlin-mode
       (:package kotlin-mode))
#+end_src

** lua
#+begin_src emacs-lisp
(setup lua-ts-mode
  (:file-match "\\.lua\\'")
)
#+end_src

** markdown
#+begin_src emacs-lisp
;;(setup markdown-mode
;;       (:package markdown-mode)
;;       (:file-match
;;        "\\.markdown\\'"
;;        "\\.md\\'")
;;       (:hook markdown-display-inline-images)
;;       (:option markdown-enable-wiki-links t)
;;       (:option markdown-fontify-code-blocks-natively t)
;;       (:option markdown-header-scaling t)
;;       (:option markdown-hide-markup t)
;;       (:option markdown-italic-underscore t)
;;       (:option markdown-blockquote-display-char '("┃" ">"))
;;       (:option markdown-list-item-bullets '("⏺" "▪"))
;;       (:option markdown-make-gfm-checkboxes-buttons t)
;;       (:option markdown-max-image-size '(1024 . 1024)))
#+end_src

*** Packages
**** markdown-toc
Generate Table of Contents.
#+begin_src emacs-lisp
;;(setup markdown-toc (:package markdown-toc))
#+end_src


** nix
#+begin_src emacs-lisp
(setup nix-ts-mode
       (:package nix-ts-mode)
  (:with-mode nix-ts-mode (:file-match "\\.nix\\'"))
  (:hook eglot-mode-hook))
(setup nix-mode
       (:package nix-mode))
#+end_src

** nushell

#+begin_src emacs-lisp
(setup nushell-ts-mode
       (:package nushell-ts-mode)
       (:file-match "\\.nu\\'"))
#+end_src

** pdf
*** Packages
** python
#+begin_src emacs-lisp :tangle no
  (setup python-ts-mode
       (:with-mode python-ts-mode  (:file-match "\\.py\\'"))
         (:hook indent-bars-mode)
         )

  (setup lazy-ruff
      (:load-after python-ts-mode)
         (:package lazy-ruff)
  )


  (setup pet
         (:package pet)
         (:hook-into python-base-mode-hook))
#+end_src

*** Packages
**** python-test
#+begin_src emacs-lisp :tangle no
(setup python-test

  :ensure t
  :bind
  (:map python-ts-mode-map
        ("C-. t a" . python-test-project)
        ("C-. t f" . python-test-file)
        ("C-. t t" . python-test-function))
  :init
  (setq python-test-backend 'pytest)
  :config
  (setq python-test-project-root-files
        (append '("README.md") python-test-project-root-files)))
#+end_src

*** Packages
**** flymake-racket
*** Appearance
**** Variable pitch
Use variable-pitch font but still make sure everything aligns.
#+begin_src emacs-lisp :tangle no
(font-lock-add-keywords
 'rst-mode
 '(("^[[:space:]-*+]+\\(\\[.\\]\\)?" 0 'fixed-pitch append))
 'append)
#+end_src

**** Bullet lists
Pretty check-boxes as well as bullet lists.
#+begin_src emacs-lisp :tangle no
(font-lock-add-keywords
 'rst-mode
 '(("^ *\\([-*+]\\) "
    (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "⏺"))))
   ("^ *[-*+] \\[\\([Xx]\\)\\] "
    (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "✕"))))))
#+end_src

** ruby
*** Packages
** scala
#+begin_src emacs-lisp
(setup scala-mode
       (:package scala-mode)
       (:file-match "\\.\\(scala\\|sbt\\)\\'"))
#+end_src

** sh
#+begin_src emacs-lisp
(setup sh-script
       (  :hook
          flymake-mode)
       (:option
        ;; Use regular indentation for line-continuation
        sh-indent-after-continuation 'always)
)
#+end_src

*** Packages
** sql
#+begin_src emacs-lisp
(setup sql
  (:option sql-mysql-options '("--protocol=tcp" "--prompt=" "--disable-pager")))
#+end_src

** terraform
#+begin_src emacs-lisp :tangle no
(setup terraform-mode
(:package terraform-mode)
)
#+end_src

** yaml
#+begin_src emacs-lisp
(setup yaml-ts-mode
  (:file-match "\\.\\(e?ya?\\|ra\\)ml\\'")
  (:hook indent-bars-mode)
  )
#+end_src

* Tool 
:PROPERTIES:
:header-args:emacs-lisp: :tangle init.el
:END:


** Indentation guides
#+begin_src emacs-lisp
(setup indent-bars
       (:package indent-bars)
       (:option indent-bars-width-frac 0.2))
#+end_src

** Terminal
*** eat
#+begin_src emacs-lisp
(setup eat
       (:package eat))
#+end_src

** Check

#+begin_src emacs-lisp
(setup jinx
(:package jinx))
#+end_src



#+begin_src emacs-lisp
(setup (:package twist)
    (add-hook 'emacs-startup-hook #'twist-watch-mode)
)
(setup (:package nix3)
  (:option nix3-flake-remote-wait 20
        nix3-registry-list-completion-options (list :add-to-registry t
                                                    :require-match nil)))
#+end_src


