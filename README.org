

* Emacs
** File Layout
*** Features
You'll notice several headings tagged with =@{feature}= like in =@mail=, these
subtrees will only be tangled if *at least one* of those features are enabled when
the config is built.

*** init.el
Everything is tangled into =init.el= by default and I don't really make any
attempt to keep this file organized since it's not really intended to be
interacted with.

#+begin_src emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-
#+end_src

*** early-init.el :early:
=early-init.el= is tangled from the subtrees that are tagged with =early= and it
should only be used to do minimal configuration that needs to occur early in the
load sequence.

#+begin_src emacs-lisp :tangle early-init.el
;;; early-init.el -*- lexical-binding: t; -*-
#+end_src


* Early :early:
:PROPERTIES:
:header-args:emacs-lisp: :tangle early-init.el
:END:

** disable package
#+begin_src emacs-lisp
  ;; Disable package.el in favor of straight.el
  (setq package-enable-at-startup nil
        package-quickstart nil)
#+end_src
** Setup.el :early:



#+begin_src emacs-lisp
  (eval-when-compile
    (require 'setup)
    (require 'cl-lib)
  )
#+end_src
*** package :early:

#+begin_src emacs-lisp
  (eval-when-compile
      (setup-define :package
    		  (lambda (package)
  		    ()
  		      )
    	    :documentation "Fake installation of PACKAGE for twist-nix."
    	    :repeatable 
    	    ))
     
#+end_src

*** :defer

#+begin_src emacs-lisp
  (eval-when-compile
    (setup-define :defer
      		(lambda (seconds &optional func)
  		  `(add-hook 'after-init-hook
  			     (lambda ()
  			       (run-with-timer ,seconds nil
  					       ,(or func (setup-get 'hook))))))
    		:documentation         "Call a function at N seconds after init."
  		))
#+end_src
*** :reformatters
#+begin_src emacs-lisp
  (eval-when-compile
    (setup-define
     :reformatters (lambda  (&rest entries)
  		   (let ((feature (setup-get 'feature)))
  		     (macroexp-progn
  		      (mapcar (pcase-lambda (`(,name . ,args))
  				`(reformatter-define ,name ,@args))
  			      entries)))))
    :documentation "Define reformatters."
    )
#+end_src
*** :load-after
#+begin_src emacs-lisp
  (eval-when-compile
    (setup-define :load-after
  		(lambda (&rest features)
  		  (let ((body `(require ',(setup-get 'feature))))
  		    (dolist (feature (nreverse features))
  		      (setq body `(with-eval-after-load ',feature ,body)))
  		    body))
  		:documentation "Load the current feature after FEATURES.")
    )
#+end_src

*** :nixpkgs
#+begin_src emacs-lisp :yes
  (eval-when-compile
    (setup-define :nixpkgs (lambda (&rest nixpkgs) ())
     :documentation "Fake installation of packages from NIXPKGS for executables."))
#+end_src
* Basic setting
** benchmark-init
#+begin_src emacs-lisp
  (setup benchmark-init
         (:package benchmark-init)
         (:require benchmark-init)
         (:only-if init-file-debug
  		 (add-hook 'after-init-hook 'benchmark-init/deactivate))
         )
#+end_src
** treesit
#+begin_src emacs-lisp
  (setup treesit
         (:only-if (fboundp 'treesit-available-p))
         )
#+end_src
** localization
#+begin_src emacs-lisp
  (setup localization
       (:option calendar-week-start-day 1)
       )

#+end_src
* UI
** theme
#+begin_src emacs-lisp
  (setup modus-themes
         (:package modus-themes)
         (:require modus-themes)
         )
  (setup ef-themes
         (:package ef-themes)
         (:require ef-themes)
         (:option
    	ef-themes-take-over-modus-themes-mode 1)
         (:when-loaded
    	(setq modus-themes-mixed-fonts t
    	      modus-themes-italic-constructs t
    	      modus-themes-disable-other-themes t)

  	(modus-themes-load-theme 'ef-summer))
         )
#+end_src
** font
** nerd-icons
#+begin_src emacs-lisp
  (setup nerd-icons
         (:package nerd-icons))
#+end_src
** Modeline
#+begin_src emacs-lisp
  (setup dashboard
         (:package dashboard)
         (:set  dashboard-icon-type 'nerd-icons)
         (dashboard-setup-startup-hook)
         )

#+end_src

** Dashboard
#+begin_src emacs-lisp
  (setup doom-modeline
         (:package doom-modeline)
         (:hook-into after-init-hook)
         (:hook size-indication-mode)
         (:hook column-number-mode)
         )

#+end_src
** display-line-number
#+begin_src emacs-lisp
  (setup display-fill-column-indicator (:hook-into prog-mode))
  (setup display-line-numbers (:hook-into prog-mode)
         (:set display-line-numbers-width 2
  	     display-line-numbers-type 'relative))
#+end_src

** Scroll
#+begin_src emacs-lisp

  (setup pixel-scroll
         (:only-if  (version<= "29" emacs-version)
  		  (:with-mode pixel-scroll-precision-mode
  			      ;; TODO: Find a better way to hook the minor mode
  			      (:hook-into find-file-hook
  					  help-mode-hook))))
#+end_src


* Editor
** Copy&Paste
*** wsl copy
#+begin_src emacs-lisp
(setq select-active-regions nil)
#+end_src

* Tool 
:PROPERTIES:
:header-args:emacs-lisp: :tangle init.el
:END:
#+begin_src emacs-lisp
  ;; (setup (:package magit))
  ;;(setup (:package forge))



  (setup org
         (:package org)
         (:also-load org-modern)
         )

  (setup org-modern
         (:package org-modern)
         (:option
    	;; Edit settings
    	org-auto-align-tags nil)
         (global-org-modern-mode)
         )
   #+end_src




